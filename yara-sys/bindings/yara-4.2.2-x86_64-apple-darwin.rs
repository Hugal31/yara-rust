/* automatically generated by rust-bindgen 0.60.1 */

pub const STRING_FLAGS_LAST_IN_RULE: u32 = 4096;
pub const META_TYPE_INTEGER: u32 = 1;
pub const META_TYPE_STRING: u32 = 2;
pub const META_TYPE_BOOLEAN: u32 = 3;
pub const META_FLAGS_LAST_IN_RULE: u32 = 1;
pub const YARA_ERROR_LEVEL_ERROR: u32 = 0;
pub const YARA_ERROR_LEVEL_WARNING: u32 = 1;
pub const ERROR_SUCCESS: u32 = 0;
pub const ERROR_INSUFICIENT_MEMORY: u32 = 1;
pub const ERROR_INSUFFICIENT_MEMORY: u32 = 1;
pub const ERROR_COULD_NOT_ATTACH_TO_PROCESS: u32 = 2;
pub const ERROR_COULD_NOT_OPEN_FILE: u32 = 3;
pub const ERROR_COULD_NOT_MAP_FILE: u32 = 4;
pub const ERROR_INVALID_FILE: u32 = 6;
pub const ERROR_CORRUPT_FILE: u32 = 7;
pub const ERROR_UNSUPPORTED_FILE_VERSION: u32 = 8;
pub const ERROR_INVALID_REGULAR_EXPRESSION: u32 = 9;
pub const ERROR_INVALID_HEX_STRING: u32 = 10;
pub const ERROR_SYNTAX_ERROR: u32 = 11;
pub const ERROR_LOOP_NESTING_LIMIT_EXCEEDED: u32 = 12;
pub const ERROR_DUPLICATED_LOOP_IDENTIFIER: u32 = 13;
pub const ERROR_DUPLICATED_IDENTIFIER: u32 = 14;
pub const ERROR_DUPLICATED_TAG_IDENTIFIER: u32 = 15;
pub const ERROR_DUPLICATED_META_IDENTIFIER: u32 = 16;
pub const ERROR_DUPLICATED_STRING_IDENTIFIER: u32 = 17;
pub const ERROR_UNREFERENCED_STRING: u32 = 18;
pub const ERROR_UNDEFINED_STRING: u32 = 19;
pub const ERROR_UNDEFINED_IDENTIFIER: u32 = 20;
pub const ERROR_MISPLACED_ANONYMOUS_STRING: u32 = 21;
pub const ERROR_INCLUDES_CIRCULAR_REFERENCE: u32 = 22;
pub const ERROR_INCLUDE_DEPTH_EXCEEDED: u32 = 23;
pub const ERROR_WRONG_TYPE: u32 = 24;
pub const ERROR_EXEC_STACK_OVERFLOW: u32 = 25;
pub const ERROR_SCAN_TIMEOUT: u32 = 26;
pub const ERROR_TOO_MANY_SCAN_THREADS: u32 = 27;
pub const ERROR_CALLBACK_ERROR: u32 = 28;
pub const ERROR_INVALID_ARGUMENT: u32 = 29;
pub const ERROR_TOO_MANY_MATCHES: u32 = 30;
pub const ERROR_INTERNAL_FATAL_ERROR: u32 = 31;
pub const ERROR_NESTED_FOR_OF_LOOP: u32 = 32;
pub const ERROR_INVALID_FIELD_NAME: u32 = 33;
pub const ERROR_UNKNOWN_MODULE: u32 = 34;
pub const ERROR_NOT_A_STRUCTURE: u32 = 35;
pub const ERROR_NOT_INDEXABLE: u32 = 36;
pub const ERROR_NOT_A_FUNCTION: u32 = 37;
pub const ERROR_INVALID_FORMAT: u32 = 38;
pub const ERROR_TOO_MANY_ARGUMENTS: u32 = 39;
pub const ERROR_WRONG_ARGUMENTS: u32 = 40;
pub const ERROR_WRONG_RETURN_TYPE: u32 = 41;
pub const ERROR_DUPLICATED_STRUCTURE_MEMBER: u32 = 42;
pub const ERROR_EMPTY_STRING: u32 = 43;
pub const ERROR_DIVISION_BY_ZERO: u32 = 44;
pub const ERROR_REGULAR_EXPRESSION_TOO_LARGE: u32 = 45;
pub const ERROR_TOO_MANY_RE_FIBERS: u32 = 46;
pub const ERROR_COULD_NOT_READ_PROCESS_MEMORY: u32 = 47;
pub const ERROR_INVALID_EXTERNAL_VARIABLE_TYPE: u32 = 48;
pub const ERROR_REGULAR_EXPRESSION_TOO_COMPLEX: u32 = 49;
pub const ERROR_INVALID_MODULE_NAME: u32 = 50;
pub const ERROR_TOO_MANY_STRINGS: u32 = 51;
pub const ERROR_INTEGER_OVERFLOW: u32 = 52;
pub const ERROR_CALLBACK_REQUIRED: u32 = 53;
pub const ERROR_INVALID_OPERAND: u32 = 54;
pub const ERROR_COULD_NOT_READ_FILE: u32 = 55;
pub const ERROR_DUPLICATED_EXTERNAL_VARIABLE: u32 = 56;
pub const ERROR_INVALID_MODULE_DATA: u32 = 57;
pub const ERROR_WRITING_FILE: u32 = 58;
pub const ERROR_INVALID_MODIFIER: u32 = 59;
pub const ERROR_DUPLICATED_MODIFIER: u32 = 60;
pub const ERROR_BLOCK_NOT_READY: u32 = 61;
pub const ERROR_INVALID_PERCENTAGE: u32 = 62;
pub const ERROR_IDENTIFIER_MATCHES_WILDCARD: u32 = 63;
pub const CALLBACK_MSG_RULE_MATCHING: u32 = 1;
pub const CALLBACK_MSG_RULE_NOT_MATCHING: u32 = 2;
pub const CALLBACK_MSG_SCAN_FINISHED: u32 = 3;
pub const CALLBACK_MSG_IMPORT_MODULE: u32 = 4;
pub const CALLBACK_MSG_MODULE_IMPORTED: u32 = 5;
pub const CALLBACK_MSG_TOO_MANY_MATCHES: u32 = 6;
pub const CALLBACK_MSG_CONSOLE_LOG: u32 = 7;
pub const CALLBACK_CONTINUE: u32 = 0;
pub const CALLBACK_ABORT: u32 = 1;
pub const CALLBACK_ERROR: u32 = 2;
pub const SCAN_FLAGS_FAST_MODE: u32 = 1;
pub const SCAN_FLAGS_PROCESS_MEMORY: u32 = 2;
pub const SCAN_FLAGS_NO_TRYCATCH: u32 = 4;
pub const SCAN_FLAGS_REPORT_RULES_MATCHING: u32 = 8;
pub const SCAN_FLAGS_REPORT_RULES_NOT_MATCHING: u32 = 16;
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_off_t = __int64_t;
pub type size_t = __darwin_size_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    fn test_field__base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sbuf),
                "::",
                stringify!(_base)
            )
        );
    }
    test_field__base();
    fn test_field__size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sbuf),
                "::",
                stringify!(_size)
            )
        );
    }
    test_field__size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    fn test_field__p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_p)
            )
        );
    }
    test_field__p();
    fn test_field__r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_r)
            )
        );
    }
    test_field__r();
    fn test_field__w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_w)
            )
        );
    }
    test_field__w();
    fn test_field__flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_flags)
            )
        );
    }
    test_field__flags();
    fn test_field__file() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_file)
            )
        );
    }
    test_field__file();
    fn test_field__bf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_bf)
            )
        );
    }
    test_field__bf();
    fn test_field__lbfsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_lbfsize)
            )
        );
    }
    test_field__lbfsize();
    fn test_field__cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_cookie)
            )
        );
    }
    test_field__cookie();
    fn test_field__close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_close)
            )
        );
    }
    test_field__close();
    fn test_field__read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_read)
            )
        );
    }
    test_field__read();
    fn test_field__seek() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_seek)
            )
        );
    }
    test_field__seek();
    fn test_field__write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_write)
            )
        );
    }
    test_field__write();
    fn test_field__ub() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_ub)
            )
        );
    }
    test_field__ub();
    fn test_field__extra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_extra)
            )
        );
    }
    test_field__extra();
    fn test_field__ur() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_ur)
            )
        );
    }
    test_field__ur();
    fn test_field__ubuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_ubuf)
            )
        );
    }
    test_field__ubuf();
    fn test_field__nbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize
            },
            119usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_nbuf)
            )
        );
    }
    test_field__nbuf();
    fn test_field__lb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_lb)
            )
        );
    }
    test_field__lb();
    fn test_field__blksize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_blksize)
            )
        );
    }
    test_field__blksize();
    fn test_field__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_offset)
            )
        );
    }
    test_field__offset();
}
pub type FILE = __sFILE;
pub type YR_STREAM_READ_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
        count: size_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> size_t,
>;
pub type YR_STREAM_WRITE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *const ::std::os::raw::c_void,
        size: size_t,
        count: size_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> size_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_STREAM {
    pub user_data: *mut ::std::os::raw::c_void,
    pub read: YR_STREAM_READ_FUNC,
    pub write: YR_STREAM_WRITE_FUNC,
}
#[test]
fn bindgen_test_layout__YR_STREAM() {
    assert_eq!(
        ::std::mem::size_of::<_YR_STREAM>(),
        24usize,
        concat!("Size of: ", stringify!(_YR_STREAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STREAM>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STREAM))
    );
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_STREAM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_STREAM),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_STREAM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_STREAM),
                "::",
                stringify!(read)
            )
        );
    }
    test_field_read();
    fn test_field_write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_STREAM>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_STREAM),
                "::",
                stringify!(write)
            )
        );
    }
    test_field_write();
}
pub type YR_STREAM = _YR_STREAM;
pub type yr_arena_off_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARENA_REF {
    pub buffer_id: u32,
    pub offset: yr_arena_off_t,
}
#[test]
fn bindgen_test_layout_YR_ARENA_REF() {
    assert_eq!(
        ::std::mem::size_of::<YR_ARENA_REF>(),
        8usize,
        concat!("Size of: ", stringify!(YR_ARENA_REF))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARENA_REF>(),
        4usize,
        concat!("Alignment of ", stringify!(YR_ARENA_REF))
    );
    fn test_field_buffer_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA_REF>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA_REF),
                "::",
                stringify!(buffer_id)
            )
        );
    }
    test_field_buffer_id();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA_REF>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA_REF),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARENA_BUFFER {
    pub data: *mut u8,
    pub size: size_t,
    pub used: size_t,
}
#[test]
fn bindgen_test_layout_YR_ARENA_BUFFER() {
    assert_eq!(
        ::std::mem::size_of::<YR_ARENA_BUFFER>(),
        24usize,
        concat!("Size of: ", stringify!(YR_ARENA_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARENA_BUFFER>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ARENA_BUFFER))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA_BUFFER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA_BUFFER),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA_BUFFER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA_BUFFER),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_used() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA_BUFFER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA_BUFFER),
                "::",
                stringify!(used)
            )
        );
    }
    test_field_used();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_RELOC {
    pub buffer_id: u32,
    pub offset: yr_arena_off_t,
    pub next: *mut YR_RELOC,
}
#[test]
fn bindgen_test_layout_YR_RELOC() {
    assert_eq!(
        ::std::mem::size_of::<YR_RELOC>(),
        16usize,
        concat!("Size of: ", stringify!(YR_RELOC))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RELOC>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RELOC))
    );
    fn test_field_buffer_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RELOC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RELOC),
                "::",
                stringify!(buffer_id)
            )
        );
    }
    test_field_buffer_id();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RELOC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RELOC),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RELOC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RELOC),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARENA {
    pub xrefs: u32,
    pub num_buffers: u32,
    pub buffers: [YR_ARENA_BUFFER; 16usize],
    pub initial_buffer_size: size_t,
    pub reloc_list_head: *mut YR_RELOC,
    pub reloc_list_tail: *mut YR_RELOC,
}
#[test]
fn bindgen_test_layout_YR_ARENA() {
    assert_eq!(
        ::std::mem::size_of::<YR_ARENA>(),
        416usize,
        concat!("Size of: ", stringify!(YR_ARENA))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARENA>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ARENA))
    );
    fn test_field_xrefs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xrefs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA),
                "::",
                stringify!(xrefs)
            )
        );
    }
    test_field_xrefs();
    fn test_field_num_buffers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_buffers) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA),
                "::",
                stringify!(num_buffers)
            )
        );
    }
    test_field_num_buffers();
    fn test_field_buffers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffers) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA),
                "::",
                stringify!(buffers)
            )
        );
    }
    test_field_buffers();
    fn test_field_initial_buffer_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).initial_buffer_size) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA),
                "::",
                stringify!(initial_buffer_size)
            )
        );
    }
    test_field_initial_buffer_size();
    fn test_field_reloc_list_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reloc_list_head) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA),
                "::",
                stringify!(reloc_list_head)
            )
        );
    }
    test_field_reloc_list_head();
    fn test_field_reloc_list_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_ARENA>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reloc_list_tail) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_ARENA),
                "::",
                stringify!(reloc_list_tail)
            )
        );
    }
    test_field_reloc_list_tail();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE_ENTRY {
    pub key: *mut ::std::os::raw::c_void,
    pub key_length: size_t,
    pub ns: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut _YR_HASH_TABLE_ENTRY,
}
#[test]
fn bindgen_test_layout__YR_HASH_TABLE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_YR_HASH_TABLE_ENTRY>(),
        40usize,
        concat!("Size of: ", stringify!(_YR_HASH_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_HASH_TABLE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_HASH_TABLE_ENTRY))
    );
    fn test_field_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE_ENTRY),
                "::",
                stringify!(key)
            )
        );
    }
    test_field_key();
    fn test_field_key_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE_ENTRY),
                "::",
                stringify!(key_length)
            )
        );
    }
    test_field_key_length();
    fn test_field_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ns) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE_ENTRY),
                "::",
                stringify!(ns)
            )
        );
    }
    test_field_ns();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE_ENTRY),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE_ENTRY>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE_ENTRY),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
}
pub type YR_HASH_TABLE_ENTRY = _YR_HASH_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE {
    pub size: ::std::os::raw::c_int,
    pub buckets: [*mut YR_HASH_TABLE_ENTRY; 1usize],
}
#[test]
fn bindgen_test_layout__YR_HASH_TABLE() {
    assert_eq!(
        ::std::mem::size_of::<_YR_HASH_TABLE>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_HASH_TABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_HASH_TABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_HASH_TABLE))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_buckets() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_HASH_TABLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buckets) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_HASH_TABLE),
                "::",
                stringify!(buckets)
            )
        );
    }
    test_field_buckets();
}
pub type YR_HASH_TABLE = _YR_HASH_TABLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
#[test]
fn bindgen_test_layout_mach_timebase_info() {
    assert_eq!(
        ::std::mem::size_of::<mach_timebase_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timebase_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timebase_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timebase_info))
    );
    fn test_field_numer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_timebase_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_timebase_info),
                "::",
                stringify!(numer)
            )
        );
    }
    test_field_numer();
    fn test_field_denom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_timebase_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).denom) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_timebase_info),
                "::",
                stringify!(denom)
            )
        );
    }
    test_field_denom();
}
pub type mach_timebase_info_data_t = mach_timebase_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_STOPWATCH {
    pub timebase: mach_timebase_info_data_t,
    pub start: u64,
}
#[test]
fn bindgen_test_layout__YR_STOPWATCH() {
    assert_eq!(
        ::std::mem::size_of::<_YR_STOPWATCH>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_STOPWATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STOPWATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STOPWATCH))
    );
    fn test_field_timebase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_STOPWATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timebase) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_STOPWATCH),
                "::",
                stringify!(timebase)
            )
        );
    }
    test_field_timebase();
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_STOPWATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_STOPWATCH),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
}
pub type YR_STOPWATCH = _YR_STOPWATCH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_NOTEBOOK {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_NAMESPACE {
    pub __bindgen_anon_1: YR_NAMESPACE__bindgen_ty_1,
    pub idx: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_NAMESPACE__bindgen_ty_1 {
    pub name: *const ::std::os::raw::c_char,
    pub name_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_NAMESPACE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_NAMESPACE__bindgen_ty_1))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_NAMESPACE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_NAMESPACE__bindgen_ty_1),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_name_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_NAMESPACE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_NAMESPACE__bindgen_ty_1),
                "::",
                stringify!(name_)
            )
        );
    }
    test_field_name_();
}
#[test]
fn bindgen_test_layout_YR_NAMESPACE() {
    assert_eq!(
        ::std::mem::size_of::<YR_NAMESPACE>(),
        16usize,
        concat!("Size of: ", stringify!(YR_NAMESPACE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_NAMESPACE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_NAMESPACE))
    );
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_NAMESPACE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_NAMESPACE),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_META {
    pub __bindgen_anon_1: YR_META__bindgen_ty_1,
    pub __bindgen_anon_2: YR_META__bindgen_ty_2,
    pub integer: i64,
    pub type_: i32,
    pub flags: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_META__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_META__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META__bindgen_ty_1))
    );
    fn test_field_identifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META__bindgen_ty_1),
                "::",
                stringify!(identifier)
            )
        );
    }
    test_field_identifier();
    fn test_field_identifier_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META__bindgen_ty_1),
                "::",
                stringify!(identifier_)
            )
        );
    }
    test_field_identifier_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_2 {
    pub string: *const ::std::os::raw::c_char,
    pub string_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_META__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_META__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META__bindgen_ty_2))
    );
    fn test_field_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META__bindgen_ty_2),
                "::",
                stringify!(string)
            )
        );
    }
    test_field_string();
    fn test_field_string_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).string_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META__bindgen_ty_2),
                "::",
                stringify!(string_)
            )
        );
    }
    test_field_string_();
}
#[test]
fn bindgen_test_layout_YR_META() {
    assert_eq!(
        ::std::mem::size_of::<YR_META>(),
        32usize,
        concat!("Size of: ", stringify!(YR_META))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META))
    );
    fn test_field_integer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).integer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META),
                "::",
                stringify!(integer)
            )
        );
    }
    test_field_integer();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_META>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_META),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_STRING {
    pub flags: u32,
    pub idx: u32,
    pub fixed_offset: i64,
    pub rule_idx: u32,
    pub length: i32,
    pub __bindgen_anon_1: YR_STRING__bindgen_ty_1,
    pub __bindgen_anon_2: YR_STRING__bindgen_ty_2,
    pub chain_gap_min: i32,
    pub chain_gap_max: i32,
    pub __bindgen_anon_3: YR_STRING__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_1 {
    pub string: *mut u8,
    pub string_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_1))
    );
    fn test_field_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING__bindgen_ty_1),
                "::",
                stringify!(string)
            )
        );
    }
    test_field_string();
    fn test_field_string_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).string_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING__bindgen_ty_1),
                "::",
                stringify!(string_)
            )
        );
    }
    test_field_string_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_2 {
    pub chained_to: *mut YR_STRING,
    pub chained_to_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_2))
    );
    fn test_field_chained_to() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chained_to) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING__bindgen_ty_2),
                "::",
                stringify!(chained_to)
            )
        );
    }
    test_field_chained_to();
    fn test_field_chained_to_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chained_to_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING__bindgen_ty_2),
                "::",
                stringify!(chained_to_)
            )
        );
    }
    test_field_chained_to_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_3 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_3))
    );
    fn test_field_identifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING__bindgen_ty_3),
                "::",
                stringify!(identifier)
            )
        );
    }
    test_field_identifier();
    fn test_field_identifier_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING__bindgen_ty_3),
                "::",
                stringify!(identifier_)
            )
        );
    }
    test_field_identifier_();
}
#[test]
fn bindgen_test_layout_YR_STRING() {
    assert_eq!(
        ::std::mem::size_of::<YR_STRING>(),
        56usize,
        concat!("Size of: ", stringify!(YR_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_fixed_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixed_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(fixed_offset)
            )
        );
    }
    test_field_fixed_offset();
    fn test_field_rule_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rule_idx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(rule_idx)
            )
        );
    }
    test_field_rule_idx();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_chain_gap_min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chain_gap_min) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(chain_gap_min)
            )
        );
    }
    test_field_chain_gap_min();
    fn test_field_chain_gap_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_STRING>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chain_gap_max) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_STRING),
                "::",
                stringify!(chain_gap_max)
            )
        );
    }
    test_field_chain_gap_max();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULE {
    pub flags: i32,
    pub num_atoms: i32,
    pub __bindgen_anon_1: YR_RULE__bindgen_ty_1,
    pub __bindgen_anon_2: YR_RULE__bindgen_ty_2,
    pub __bindgen_anon_3: YR_RULE__bindgen_ty_3,
    pub __bindgen_anon_4: YR_RULE__bindgen_ty_4,
    pub __bindgen_anon_5: YR_RULE__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_1))
    );
    fn test_field_identifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_1),
                "::",
                stringify!(identifier)
            )
        );
    }
    test_field_identifier();
    fn test_field_identifier_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_1),
                "::",
                stringify!(identifier_)
            )
        );
    }
    test_field_identifier_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_2 {
    pub tags: *const ::std::os::raw::c_char,
    pub tags_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_2))
    );
    fn test_field_tags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_2),
                "::",
                stringify!(tags)
            )
        );
    }
    test_field_tags();
    fn test_field_tags_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tags_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_2),
                "::",
                stringify!(tags_)
            )
        );
    }
    test_field_tags_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_3 {
    pub metas: *mut YR_META,
    pub metas_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_3))
    );
    fn test_field_metas() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).metas) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_3),
                "::",
                stringify!(metas)
            )
        );
    }
    test_field_metas();
    fn test_field_metas_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).metas_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_3),
                "::",
                stringify!(metas_)
            )
        );
    }
    test_field_metas_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_4 {
    pub strings: *mut YR_STRING,
    pub strings_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_4))
    );
    fn test_field_strings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strings) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_4),
                "::",
                stringify!(strings)
            )
        );
    }
    test_field_strings();
    fn test_field_strings_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strings_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_4),
                "::",
                stringify!(strings_)
            )
        );
    }
    test_field_strings_();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_5 {
    pub ns: *mut YR_NAMESPACE,
    pub ns_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_5))
    );
    fn test_field_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ns) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_5),
                "::",
                stringify!(ns)
            )
        );
    }
    test_field_ns();
    fn test_field_ns_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ns_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE__bindgen_ty_5),
                "::",
                stringify!(ns_)
            )
        );
    }
    test_field_ns_();
}
#[test]
fn bindgen_test_layout_YR_RULE() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE>(),
        48usize,
        concat!("Size of: ", stringify!(YR_RULE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_num_atoms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_atoms) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE),
                "::",
                stringify!(num_atoms)
            )
        );
    }
    test_field_num_atoms();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_EXTERNAL_VARIABLE {
    pub type_: i32,
    pub value: YR_EXTERNAL_VARIABLE__bindgen_ty_1,
    pub __bindgen_anon_1: YR_EXTERNAL_VARIABLE__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_1 {
    pub i: i64,
    pub f: f64,
    pub s: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1)
        )
    );
    fn test_field_i() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
                "::",
                stringify!(i)
            )
        );
    }
    test_field_i();
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_2 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2)
        )
    );
    fn test_field_identifier() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2),
                "::",
                stringify!(identifier)
            )
        );
    }
    test_field_identifier();
    fn test_field_identifier_() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2),
                "::",
                stringify!(identifier_)
            )
        );
    }
    test_field_identifier_();
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE() {
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE>(),
        24usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_EXTERNAL_VARIABLE))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_EXTERNAL_VARIABLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_EXTERNAL_VARIABLE),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_MATCH {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_1 {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_1))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_2 {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_2))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_3 {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_3))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_4 {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_4))
    );
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RE_NODE {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: RE_NODE__bindgen_ty_1,
    pub __bindgen_anon_2: RE_NODE__bindgen_ty_2,
    pub greedy: ::std::os::raw::c_int,
    pub re_class: *mut RE_CLASS,
    pub children_head: *mut RE_NODE,
    pub children_tail: *mut RE_NODE,
    pub prev_sibling: *mut RE_NODE,
    pub next_sibling: *mut RE_NODE,
    pub forward_code_ref: YR_ARENA_REF,
    pub backward_code_ref: YR_ARENA_REF,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_1 {
    pub value: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RE_NODE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RE_NODE__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(RE_NODE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(RE_NODE__bindgen_ty_1))
    );
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE__bindgen_ty_1),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE__bindgen_ty_1),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE__bindgen_ty_1),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_2 {
    pub mask: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RE_NODE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<RE_NODE__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(RE_NODE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(RE_NODE__bindgen_ty_2))
    );
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE__bindgen_ty_2),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
    fn test_field_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE__bindgen_ty_2),
                "::",
                stringify!(end)
            )
        );
    }
    test_field_end();
}
#[test]
fn bindgen_test_layout_RE_NODE() {
    assert_eq!(
        ::std::mem::size_of::<RE_NODE>(),
        72usize,
        concat!("Size of: ", stringify!(RE_NODE))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_NODE))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_greedy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).greedy) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(greedy)
            )
        );
    }
    test_field_greedy();
    fn test_field_re_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re_class) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(re_class)
            )
        );
    }
    test_field_re_class();
    fn test_field_children_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).children_head) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(children_head)
            )
        );
    }
    test_field_children_head();
    fn test_field_children_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).children_tail) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(children_tail)
            )
        );
    }
    test_field_children_tail();
    fn test_field_prev_sibling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_sibling) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(prev_sibling)
            )
        );
    }
    test_field_prev_sibling();
    fn test_field_next_sibling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_sibling) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(next_sibling)
            )
        );
    }
    test_field_next_sibling();
    fn test_field_forward_code_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).forward_code_ref) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(forward_code_ref)
            )
        );
    }
    test_field_forward_code_ref();
    fn test_field_backward_code_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_NODE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).backward_code_ref) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_NODE),
                "::",
                stringify!(backward_code_ref)
            )
        );
    }
    test_field_backward_code_ref();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_CLASS {
    pub negated: u8,
    pub bitmap: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_RE_CLASS() {
    assert_eq!(
        ::std::mem::size_of::<RE_CLASS>(),
        33usize,
        concat!("Size of: ", stringify!(RE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_CLASS>(),
        1usize,
        concat!("Alignment of ", stringify!(RE_CLASS))
    );
    fn test_field_negated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_CLASS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).negated) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_CLASS),
                "::",
                stringify!(negated)
            )
        );
    }
    test_field_negated();
    fn test_field_bitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_CLASS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_CLASS),
                "::",
                stringify!(bitmap)
            )
        );
    }
    test_field_bitmap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_AST {
    pub flags: u32,
    pub root_node: *mut RE_NODE,
}
#[test]
fn bindgen_test_layout_RE_AST() {
    assert_eq!(
        ::std::mem::size_of::<RE_AST>(),
        16usize,
        concat!("Size of: ", stringify!(RE_AST))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_AST>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_AST))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_AST>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_AST),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_root_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_AST>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).root_node) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_AST),
                "::",
                stringify!(root_node)
            )
        );
    }
    test_field_root_node();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FIBER {
    pub ip: *const u8,
    pub sp: i32,
    pub rc: i32,
    pub prev: *mut RE_FIBER,
    pub next: *mut RE_FIBER,
    pub stack: [u16; 1024usize],
}
#[test]
fn bindgen_test_layout_RE_FIBER() {
    assert_eq!(
        ::std::mem::size_of::<RE_FIBER>(),
        2080usize,
        concat!("Size of: ", stringify!(RE_FIBER))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FIBER>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FIBER))
    );
    fn test_field_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER),
                "::",
                stringify!(ip)
            )
        );
    }
    test_field_ip();
    fn test_field_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER),
                "::",
                stringify!(sp)
            )
        );
    }
    test_field_sp();
    fn test_field_rc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER),
                "::",
                stringify!(rc)
            )
        );
    }
    test_field_rc();
    fn test_field_prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER),
                "::",
                stringify!(prev)
            )
        );
    }
    test_field_prev();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER),
                "::",
                stringify!(stack)
            )
        );
    }
    test_field_stack();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FIBER_LIST {
    pub head: *mut RE_FIBER,
    pub tail: *mut RE_FIBER,
}
#[test]
fn bindgen_test_layout_RE_FIBER_LIST() {
    assert_eq!(
        ::std::mem::size_of::<RE_FIBER_LIST>(),
        16usize,
        concat!("Size of: ", stringify!(RE_FIBER_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FIBER_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FIBER_LIST))
    );
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER_LIST>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER_LIST),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
    fn test_field_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER_LIST>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER_LIST),
                "::",
                stringify!(tail)
            )
        );
    }
    test_field_tail();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FIBER_POOL {
    pub fiber_count: ::std::os::raw::c_int,
    pub fibers: RE_FIBER_LIST,
}
#[test]
fn bindgen_test_layout_RE_FIBER_POOL() {
    assert_eq!(
        ::std::mem::size_of::<RE_FIBER_POOL>(),
        24usize,
        concat!("Size of: ", stringify!(RE_FIBER_POOL))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FIBER_POOL>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FIBER_POOL))
    );
    fn test_field_fiber_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER_POOL>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fiber_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER_POOL),
                "::",
                stringify!(fiber_count)
            )
        );
    }
    test_field_fiber_count();
    fn test_field_fibers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FIBER_POOL>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fibers) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FIBER_POOL),
                "::",
                stringify!(fibers)
            )
        );
    }
    test_field_fibers();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FAST_EXEC_POSITION {
    pub round: ::std::os::raw::c_int,
    pub input: *const u8,
    pub prev: *mut RE_FAST_EXEC_POSITION,
    pub next: *mut RE_FAST_EXEC_POSITION,
}
#[test]
fn bindgen_test_layout_RE_FAST_EXEC_POSITION() {
    assert_eq!(
        ::std::mem::size_of::<RE_FAST_EXEC_POSITION>(),
        32usize,
        concat!("Size of: ", stringify!(RE_FAST_EXEC_POSITION))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FAST_EXEC_POSITION>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FAST_EXEC_POSITION))
    );
    fn test_field_round() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FAST_EXEC_POSITION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).round) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FAST_EXEC_POSITION),
                "::",
                stringify!(round)
            )
        );
    }
    test_field_round();
    fn test_field_input() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FAST_EXEC_POSITION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FAST_EXEC_POSITION),
                "::",
                stringify!(input)
            )
        );
    }
    test_field_input();
    fn test_field_prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FAST_EXEC_POSITION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FAST_EXEC_POSITION),
                "::",
                stringify!(prev)
            )
        );
    }
    test_field_prev();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FAST_EXEC_POSITION>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FAST_EXEC_POSITION),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FAST_EXEC_POSITION_POOL {
    pub head: *mut RE_FAST_EXEC_POSITION,
}
#[test]
fn bindgen_test_layout_RE_FAST_EXEC_POSITION_POOL() {
    assert_eq!(
        ::std::mem::size_of::<RE_FAST_EXEC_POSITION_POOL>(),
        8usize,
        concat!("Size of: ", stringify!(RE_FAST_EXEC_POSITION_POOL))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FAST_EXEC_POSITION_POOL>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FAST_EXEC_POSITION_POOL))
    );
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RE_FAST_EXEC_POSITION_POOL>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RE_FAST_EXEC_POSITION_POOL),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MATCHES {
    pub head: *mut YR_MATCH,
    pub tail: *mut YR_MATCH,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_YR_MATCHES() {
    assert_eq!(
        ::std::mem::size_of::<YR_MATCHES>(),
        24usize,
        concat!("Size of: ", stringify!(YR_MATCHES))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCHES>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCHES))
    );
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCHES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCHES),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
    fn test_field_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCHES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCHES),
                "::",
                stringify!(tail)
            )
        );
    }
    test_field_tail();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCHES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCHES),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MATCH {
    pub base: i64,
    pub offset: i64,
    pub match_length: i32,
    pub data_length: i32,
    pub data: *const u8,
    pub prev: *mut YR_MATCH,
    pub next: *mut YR_MATCH,
    pub chain_length: i32,
    pub is_private: bool,
}
#[test]
fn bindgen_test_layout_YR_MATCH() {
    assert_eq!(
        ::std::mem::size_of::<YR_MATCH>(),
        56usize,
        concat!("Size of: ", stringify!(YR_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCH))
    );
    fn test_field_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(base)
            )
        );
    }
    test_field_base();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_match_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).match_length) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(match_length)
            )
        );
    }
    test_field_match_length();
    fn test_field_data_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_length) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(data_length)
            )
        );
    }
    test_field_data_length();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(prev)
            )
        );
    }
    test_field_prev();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_chain_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chain_length) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(chain_length)
            )
        );
    }
    test_field_chain_length();
    fn test_field_is_private() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MATCH>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_private) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MATCH),
                "::",
                stringify!(is_private)
            )
        );
    }
    test_field_is_private();
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_AUTOMATON {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_YR_AC_AUTOMATON() {
    assert_eq!(
        ::std::mem::size_of::<YR_AC_AUTOMATON>(),
        32usize,
        concat!("Size of: ", stringify!(YR_AC_AUTOMATON))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_AUTOMATON>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_AUTOMATON))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct YR_RULES {
    pub _bindgen_opaque_blob: [u64; 10usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULES__bindgen_ty_1 {
    pub rules_table: *mut YR_RULE,
    pub rules_list_head: *mut YR_RULE,
}
#[test]
fn bindgen_test_layout_YR_RULES__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULES__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULES__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES__bindgen_ty_1))
    );
    fn test_field_rules_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rules_table) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES__bindgen_ty_1),
                "::",
                stringify!(rules_table)
            )
        );
    }
    test_field_rules_table();
    fn test_field_rules_list_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rules_list_head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES__bindgen_ty_1),
                "::",
                stringify!(rules_list_head)
            )
        );
    }
    test_field_rules_list_head();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULES__bindgen_ty_2 {
    pub strings_table: *mut YR_STRING,
    pub strings_list_head: *mut YR_STRING,
}
#[test]
fn bindgen_test_layout_YR_RULES__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULES__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULES__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES__bindgen_ty_2))
    );
    fn test_field_strings_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strings_table) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES__bindgen_ty_2),
                "::",
                stringify!(strings_table)
            )
        );
    }
    test_field_strings_table();
    fn test_field_strings_list_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strings_list_head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES__bindgen_ty_2),
                "::",
                stringify!(strings_list_head)
            )
        );
    }
    test_field_strings_list_head();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULES__bindgen_ty_3 {
    pub ext_vars_table: *mut YR_EXTERNAL_VARIABLE,
    pub externals_list_head: *mut YR_EXTERNAL_VARIABLE,
}
#[test]
fn bindgen_test_layout_YR_RULES__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULES__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULES__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES__bindgen_ty_3))
    );
    fn test_field_ext_vars_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ext_vars_table) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES__bindgen_ty_3),
                "::",
                stringify!(ext_vars_table)
            )
        );
    }
    test_field_ext_vars_table();
    fn test_field_externals_list_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).externals_list_head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES__bindgen_ty_3),
                "::",
                stringify!(externals_list_head)
            )
        );
    }
    test_field_externals_list_head();
}
#[test]
fn bindgen_test_layout_YR_RULES() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULES>(),
        80usize,
        concat!("Size of: ", stringify!(YR_RULES))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_RULES_STATS {
    pub num_rules: u32,
    pub num_strings: u32,
    pub ac_matches: u32,
    pub ac_root_match_list_length: u32,
    pub ac_average_match_list_length: f32,
    pub top_ac_match_list_lengths: [u32; 100usize],
    pub ac_match_list_length_pctls: [u32; 101usize],
    pub ac_tables_size: u32,
}
#[test]
fn bindgen_test_layout_YR_RULES_STATS() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULES_STATS>(),
        828usize,
        concat!("Size of: ", stringify!(YR_RULES_STATS))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES_STATS>(),
        4usize,
        concat!("Alignment of ", stringify!(YR_RULES_STATS))
    );
    fn test_field_num_rules() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_rules) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(num_rules)
            )
        );
    }
    test_field_num_rules();
    fn test_field_num_strings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_strings) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(num_strings)
            )
        );
    }
    test_field_num_strings();
    fn test_field_ac_matches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ac_matches) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(ac_matches)
            )
        );
    }
    test_field_ac_matches();
    fn test_field_ac_root_match_list_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ac_root_match_list_length) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(ac_root_match_list_length)
            )
        );
    }
    test_field_ac_root_match_list_length();
    fn test_field_ac_average_match_list_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ac_average_match_list_length) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(ac_average_match_list_length)
            )
        );
    }
    test_field_ac_average_match_list_length();
    fn test_field_top_ac_match_list_lengths() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top_ac_match_list_lengths) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(top_ac_match_list_lengths)
            )
        );
    }
    test_field_top_ac_match_list_lengths();
    fn test_field_ac_match_list_length_pctls() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ac_match_list_length_pctls) as usize - ptr as usize
            },
            420usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(ac_match_list_length_pctls)
            )
        );
    }
    test_field_ac_match_list_length_pctls();
    fn test_field_ac_tables_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULES_STATS>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ac_tables_size) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULES_STATS),
                "::",
                stringify!(ac_tables_size)
            )
        );
    }
    test_field_ac_tables_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_PROFILING_INFO {
    pub atom_matches: u32,
    pub match_time: u64,
    pub exec_time: u64,
}
#[test]
fn bindgen_test_layout_YR_PROFILING_INFO() {
    assert_eq!(
        ::std::mem::size_of::<YR_PROFILING_INFO>(),
        24usize,
        concat!("Size of: ", stringify!(YR_PROFILING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_PROFILING_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_PROFILING_INFO))
    );
    fn test_field_atom_matches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_PROFILING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).atom_matches) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_PROFILING_INFO),
                "::",
                stringify!(atom_matches)
            )
        );
    }
    test_field_atom_matches();
    fn test_field_match_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_PROFILING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).match_time) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_PROFILING_INFO),
                "::",
                stringify!(match_time)
            )
        );
    }
    test_field_match_time();
    fn test_field_exec_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_PROFILING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exec_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_PROFILING_INFO),
                "::",
                stringify!(exec_time)
            )
        );
    }
    test_field_exec_time();
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_RULE_PROFILING_INFO {
    pub rule: *mut YR_RULE,
    pub cost: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE_PROFILING_INFO() {
    assert_eq!(
        ::std::mem::size_of::<YR_RULE_PROFILING_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(YR_RULE_PROFILING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE_PROFILING_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE_PROFILING_INFO))
    );
    fn test_field_rule() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE_PROFILING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rule) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE_PROFILING_INFO),
                "::",
                stringify!(rule)
            )
        );
    }
    test_field_rule();
    fn test_field_cost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_RULE_PROFILING_INFO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cost) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_RULE_PROFILING_INFO),
                "::",
                stringify!(cost)
            )
        );
    }
    test_field_cost();
}
pub type YR_MEMORY_BLOCK_FETCH_DATA_FUNC =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut YR_MEMORY_BLOCK) -> *const u8>;
pub type YR_MEMORY_BLOCK_ITERATOR_FUNC = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut YR_MEMORY_BLOCK_ITERATOR) -> *mut YR_MEMORY_BLOCK,
>;
pub type YR_MEMORY_BLOCK_ITERATOR_SIZE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut YR_MEMORY_BLOCK_ITERATOR) -> u64>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MEMORY_BLOCK {
    pub size: size_t,
    pub base: u64,
    pub context: *mut ::std::os::raw::c_void,
    pub fetch_data: YR_MEMORY_BLOCK_FETCH_DATA_FUNC,
}
#[test]
fn bindgen_test_layout_YR_MEMORY_BLOCK() {
    assert_eq!(
        ::std::mem::size_of::<YR_MEMORY_BLOCK>(),
        32usize,
        concat!("Size of: ", stringify!(YR_MEMORY_BLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MEMORY_BLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MEMORY_BLOCK))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK),
                "::",
                stringify!(base)
            )
        );
    }
    test_field_base();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_fetch_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fetch_data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK),
                "::",
                stringify!(fetch_data)
            )
        );
    }
    test_field_fetch_data();
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MEMORY_BLOCK_ITERATOR {
    pub context: *mut ::std::os::raw::c_void,
    pub first: YR_MEMORY_BLOCK_ITERATOR_FUNC,
    pub next: YR_MEMORY_BLOCK_ITERATOR_FUNC,
    pub file_size: YR_MEMORY_BLOCK_ITERATOR_SIZE_FUNC,
    pub last_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_YR_MEMORY_BLOCK_ITERATOR() {
    assert_eq!(
        ::std::mem::size_of::<YR_MEMORY_BLOCK_ITERATOR>(),
        40usize,
        concat!("Size of: ", stringify!(YR_MEMORY_BLOCK_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MEMORY_BLOCK_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MEMORY_BLOCK_ITERATOR))
    );
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK_ITERATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK_ITERATOR),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_first() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK_ITERATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK_ITERATOR),
                "::",
                stringify!(first)
            )
        );
    }
    test_field_first();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK_ITERATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK_ITERATOR),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_file_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK_ITERATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK_ITERATOR),
                "::",
                stringify!(file_size)
            )
        );
    }
    test_field_file_size();
    fn test_field_last_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_MEMORY_BLOCK_ITERATOR>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_error) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_MEMORY_BLOCK_ITERATOR),
                "::",
                stringify!(last_error)
            )
        );
    }
    test_field_last_error();
}
pub type YR_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut YR_SCAN_CONTEXT,
        message: ::std::os::raw::c_int,
        message_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_SCAN_CONTEXT {
    pub file_size: u64,
    pub entry_point: u64,
    pub flags: ::std::os::raw::c_int,
    pub canary: ::std::os::raw::c_int,
    pub timeout: u64,
    pub user_data: *mut ::std::os::raw::c_void,
    pub callback: YR_CALLBACK_FUNC,
    pub rules: *mut YR_RULES,
    pub last_error_string: *mut YR_STRING,
    pub iterator: *mut YR_MEMORY_BLOCK_ITERATOR,
    pub objects_table: *mut YR_HASH_TABLE,
    pub matches_notebook: *mut YR_NOTEBOOK,
    pub stopwatch: YR_STOPWATCH,
    pub re_fiber_pool: RE_FIBER_POOL,
    pub re_fast_exec_position_pool: RE_FAST_EXEC_POSITION_POOL,
    pub rule_matches_flags: *mut ::std::os::raw::c_ulong,
    pub ns_unsatisfied_flags: *mut ::std::os::raw::c_ulong,
    pub strings_temp_disabled: *mut ::std::os::raw::c_ulong,
    pub matches: *mut YR_MATCHES,
    pub unconfirmed_matches: *mut YR_MATCHES,
    pub profiling_info: *mut YR_PROFILING_INFO,
}
#[test]
fn bindgen_test_layout_YR_SCAN_CONTEXT() {
    assert_eq!(
        ::std::mem::size_of::<YR_SCAN_CONTEXT>(),
        184usize,
        concat!("Size of: ", stringify!(YR_SCAN_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_SCAN_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_SCAN_CONTEXT))
    );
    fn test_field_file_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(file_size)
            )
        );
    }
    test_field_file_size();
    fn test_field_entry_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entry_point) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(entry_point)
            )
        );
    }
    test_field_entry_point();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_canary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(canary)
            )
        );
    }
    test_field_canary();
    fn test_field_timeout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(timeout)
            )
        );
    }
    test_field_timeout();
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(callback)
            )
        );
    }
    test_field_callback();
    fn test_field_rules() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rules) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(rules)
            )
        );
    }
    test_field_rules();
    fn test_field_last_error_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_error_string) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(last_error_string)
            )
        );
    }
    test_field_last_error_string();
    fn test_field_iterator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iterator) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(iterator)
            )
        );
    }
    test_field_iterator();
    fn test_field_objects_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).objects_table) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(objects_table)
            )
        );
    }
    test_field_objects_table();
    fn test_field_matches_notebook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).matches_notebook) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(matches_notebook)
            )
        );
    }
    test_field_matches_notebook();
    fn test_field_stopwatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stopwatch) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(stopwatch)
            )
        );
    }
    test_field_stopwatch();
    fn test_field_re_fiber_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re_fiber_pool) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(re_fiber_pool)
            )
        );
    }
    test_field_re_fiber_pool();
    fn test_field_re_fast_exec_position_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re_fast_exec_position_pool) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(re_fast_exec_position_pool)
            )
        );
    }
    test_field_re_fast_exec_position_pool();
    fn test_field_rule_matches_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rule_matches_flags) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(rule_matches_flags)
            )
        );
    }
    test_field_rule_matches_flags();
    fn test_field_ns_unsatisfied_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ns_unsatisfied_flags) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(ns_unsatisfied_flags)
            )
        );
    }
    test_field_ns_unsatisfied_flags();
    fn test_field_strings_temp_disabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strings_temp_disabled) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(strings_temp_disabled)
            )
        );
    }
    test_field_strings_temp_disabled();
    fn test_field_matches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).matches) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(matches)
            )
        );
    }
    test_field_matches();
    fn test_field_unconfirmed_matches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unconfirmed_matches) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(unconfirmed_matches)
            )
        );
    }
    test_field_unconfirmed_matches();
    fn test_field_profiling_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<YR_SCAN_CONTEXT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).profiling_info) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(YR_SCAN_CONTEXT),
                "::",
                stringify!(profiling_info)
            )
        );
    }
    test_field_profiling_info();
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOMS_CONFIG {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_YR_ATOMS_CONFIG() {
    assert_eq!(
        ::std::mem::size_of::<YR_ATOMS_CONFIG>(),
        32usize,
        concat!("Size of: ", stringify!(YR_ATOMS_CONFIG))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOMS_CONFIG>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ATOMS_CONFIG))
    );
}
pub type YR_COMPILER_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        error_level: ::std::os::raw::c_int,
        file_name: *const ::std::os::raw::c_char,
        line_number: ::std::os::raw::c_int,
        rule: *const YR_RULE,
        message: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_INCLUDE_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        include_name: *const ::std::os::raw::c_char,
        calling_rule_filename: *const ::std::os::raw::c_char,
        calling_rule_namespace: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
pub type YR_COMPILER_INCLUDE_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        callback_result_ptr: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_RE_AST_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        rule: *const YR_RULE,
        string_identifier: *const ::std::os::raw::c_char,
        re_ast: *const RE_AST,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_FIXUP = [u64; 2usize];
pub type YR_LOOP_CONTEXT = [u64; 11usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_COMPILER {
    pub arena: *mut YR_ARENA,
    pub current_rule_idx: u32,
    pub next_rule_idx: u32,
    pub current_string_idx: u32,
    pub current_namespace_idx: u32,
    pub current_meta_idx: u32,
    pub rules: *mut YR_RULES,
    pub errors: ::std::os::raw::c_int,
    pub current_line: ::std::os::raw::c_int,
    pub last_error: ::std::os::raw::c_int,
    pub last_error_line: ::std::os::raw::c_int,
    pub error_recovery: jmp_buf,
    pub automaton: *mut YR_AC_AUTOMATON,
    pub rules_table: *mut YR_HASH_TABLE,
    pub objects_table: *mut YR_HASH_TABLE,
    pub strings_table: *mut YR_HASH_TABLE,
    pub wildcard_identifiers_table: *mut YR_HASH_TABLE,
    pub sz_table: *mut YR_HASH_TABLE,
    pub fixup_stack_head: *mut YR_FIXUP,
    pub num_namespaces: ::std::os::raw::c_int,
    pub loop_: [YR_LOOP_CONTEXT; 4usize],
    pub loop_index: ::std::os::raw::c_int,
    pub loop_for_of_var_index: ::std::os::raw::c_int,
    pub file_name_stack: [*mut ::std::os::raw::c_char; 16usize],
    pub file_name_stack_ptr: ::std::os::raw::c_int,
    pub last_error_extra_info: [::std::os::raw::c_char; 256usize],
    pub lex_buf: [::std::os::raw::c_char; 8192usize],
    pub lex_buf_ptr: *mut ::std::os::raw::c_char,
    pub lex_buf_len: ::std::os::raw::c_ushort,
    pub include_base_dir: [::std::os::raw::c_char; 1024usize],
    pub user_data: *mut ::std::os::raw::c_void,
    pub incl_clbk_user_data: *mut ::std::os::raw::c_void,
    pub re_ast_clbk_user_data: *mut ::std::os::raw::c_void,
    pub callback: YR_COMPILER_CALLBACK_FUNC,
    pub include_callback: YR_COMPILER_INCLUDE_CALLBACK_FUNC,
    pub include_free: YR_COMPILER_INCLUDE_FREE_FUNC,
    pub re_ast_callback: YR_COMPILER_RE_AST_CALLBACK_FUNC,
    pub atoms_config: YR_ATOMS_CONFIG,
}
#[test]
fn bindgen_test_layout__YR_COMPILER() {
    assert_eq!(
        ::std::mem::size_of::<_YR_COMPILER>(),
        10344usize,
        concat!("Size of: ", stringify!(_YR_COMPILER))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_COMPILER>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_COMPILER))
    );
    fn test_field_arena() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(arena)
            )
        );
    }
    test_field_arena();
    fn test_field_current_rule_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_rule_idx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(current_rule_idx)
            )
        );
    }
    test_field_current_rule_idx();
    fn test_field_next_rule_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_rule_idx) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(next_rule_idx)
            )
        );
    }
    test_field_next_rule_idx();
    fn test_field_current_string_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_string_idx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(current_string_idx)
            )
        );
    }
    test_field_current_string_idx();
    fn test_field_current_namespace_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_namespace_idx) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(current_namespace_idx)
            )
        );
    }
    test_field_current_namespace_idx();
    fn test_field_current_meta_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_meta_idx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(current_meta_idx)
            )
        );
    }
    test_field_current_meta_idx();
    fn test_field_rules() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rules) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(rules)
            )
        );
    }
    test_field_rules();
    fn test_field_errors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(errors)
            )
        );
    }
    test_field_errors();
    fn test_field_current_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_line) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(current_line)
            )
        );
    }
    test_field_current_line();
    fn test_field_last_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_error) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(last_error)
            )
        );
    }
    test_field_last_error();
    fn test_field_last_error_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_error_line) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(last_error_line)
            )
        );
    }
    test_field_last_error_line();
    fn test_field_error_recovery() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error_recovery) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(error_recovery)
            )
        );
    }
    test_field_error_recovery();
    fn test_field_automaton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).automaton) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(automaton)
            )
        );
    }
    test_field_automaton();
    fn test_field_rules_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rules_table) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(rules_table)
            )
        );
    }
    test_field_rules_table();
    fn test_field_objects_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).objects_table) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(objects_table)
            )
        );
    }
    test_field_objects_table();
    fn test_field_strings_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strings_table) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(strings_table)
            )
        );
    }
    test_field_strings_table();
    fn test_field_wildcard_identifiers_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wildcard_identifiers_table) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(wildcard_identifiers_table)
            )
        );
    }
    test_field_wildcard_identifiers_table();
    fn test_field_sz_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sz_table) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(sz_table)
            )
        );
    }
    test_field_sz_table();
    fn test_field_fixup_stack_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixup_stack_head) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(fixup_stack_head)
            )
        );
    }
    test_field_fixup_stack_head();
    fn test_field_num_namespaces() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_namespaces) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(num_namespaces)
            )
        );
    }
    test_field_num_namespaces();
    fn test_field_loop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loop_) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(loop_)
            )
        );
    }
    test_field_loop();
    fn test_field_loop_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loop_index) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(loop_index)
            )
        );
    }
    test_field_loop_index();
    fn test_field_loop_for_of_var_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loop_for_of_var_index) as usize - ptr as usize
            },
            628usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(loop_for_of_var_index)
            )
        );
    }
    test_field_loop_for_of_var_index();
    fn test_field_file_name_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).file_name_stack) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(file_name_stack)
            )
        );
    }
    test_field_file_name_stack();
    fn test_field_file_name_stack_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).file_name_stack_ptr) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(file_name_stack_ptr)
            )
        );
    }
    test_field_file_name_stack_ptr();
    fn test_field_last_error_extra_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_error_extra_info) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(last_error_extra_info)
            )
        );
    }
    test_field_last_error_extra_info();
    fn test_field_lex_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lex_buf) as usize - ptr as usize
            },
            1020usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(lex_buf)
            )
        );
    }
    test_field_lex_buf();
    fn test_field_lex_buf_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lex_buf_ptr) as usize - ptr as usize
            },
            9216usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(lex_buf_ptr)
            )
        );
    }
    test_field_lex_buf_ptr();
    fn test_field_lex_buf_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lex_buf_len) as usize - ptr as usize
            },
            9224usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(lex_buf_len)
            )
        );
    }
    test_field_lex_buf_len();
    fn test_field_include_base_dir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).include_base_dir) as usize - ptr as usize
            },
            9226usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(include_base_dir)
            )
        );
    }
    test_field_include_base_dir();
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            10256usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_incl_clbk_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).incl_clbk_user_data) as usize - ptr as usize
            },
            10264usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(incl_clbk_user_data)
            )
        );
    }
    test_field_incl_clbk_user_data();
    fn test_field_re_ast_clbk_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re_ast_clbk_user_data) as usize - ptr as usize
            },
            10272usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(re_ast_clbk_user_data)
            )
        );
    }
    test_field_re_ast_clbk_user_data();
    fn test_field_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize
            },
            10280usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(callback)
            )
        );
    }
    test_field_callback();
    fn test_field_include_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).include_callback) as usize - ptr as usize
            },
            10288usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(include_callback)
            )
        );
    }
    test_field_include_callback();
    fn test_field_include_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).include_free) as usize - ptr as usize
            },
            10296usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(include_free)
            )
        );
    }
    test_field_include_free();
    fn test_field_re_ast_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re_ast_callback) as usize - ptr as usize
            },
            10304usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(re_ast_callback)
            )
        );
    }
    test_field_re_ast_callback();
    fn test_field_atoms_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_YR_COMPILER>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).atoms_config) as usize - ptr as usize
            },
            10312usize,
            concat!(
                "Offset of field: ",
                stringify!(_YR_COMPILER),
                "::",
                stringify!(atoms_config)
            )
        );
    }
    test_field_atoms_config();
}
pub type YR_COMPILER = _YR_COMPILER;
extern "C" {
    pub fn yr_compiler_create(compiler: *mut *mut YR_COMPILER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_destroy(compiler: *mut YR_COMPILER);
}
extern "C" {
    pub fn yr_compiler_set_callback(
        compiler: *mut YR_COMPILER,
        callback: YR_COMPILER_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_compiler_set_include_callback(
        compiler: *mut YR_COMPILER,
        include_callback: YR_COMPILER_INCLUDE_CALLBACK_FUNC,
        include_free: YR_COMPILER_INCLUDE_FREE_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_compiler_set_re_ast_callback(
        compiler: *mut YR_COMPILER,
        re_ast_callback: YR_COMPILER_RE_AST_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_compiler_set_atom_quality_table(
        compiler: *mut YR_COMPILER,
        table: *const ::std::os::raw::c_void,
        entries: ::std::os::raw::c_int,
        warning_threshold: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn yr_compiler_load_atom_quality_table(
        compiler: *mut YR_COMPILER,
        filename: *const ::std::os::raw::c_char,
        warning_threshold: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_add_file(
        compiler: *mut YR_COMPILER,
        rules_file: *mut FILE,
        namespace_: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_add_fd(
        compiler: *mut YR_COMPILER,
        rules_fd: ::std::os::raw::c_int,
        namespace_: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_add_string(
        compiler: *mut YR_COMPILER,
        rules_string: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_error_message(
        compiler: *mut YR_COMPILER,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yr_compiler_get_current_file_name(
        compiler: *mut YR_COMPILER,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yr_compiler_define_integer_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_define_boolean_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_define_float_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_define_string_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_rules(
        compiler: *mut YR_COMPILER,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
pub const _YR_CONFIG_NAME_YR_CONFIG_STACK_SIZE: _YR_CONFIG_NAME = 0;
pub const _YR_CONFIG_NAME_YR_CONFIG_MAX_STRINGS_PER_RULE: _YR_CONFIG_NAME = 1;
pub const _YR_CONFIG_NAME_YR_CONFIG_MAX_MATCH_DATA: _YR_CONFIG_NAME = 2;
pub const _YR_CONFIG_NAME_YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK: _YR_CONFIG_NAME = 3;
pub const _YR_CONFIG_NAME_YR_CONFIG_LAST: _YR_CONFIG_NAME = 4;
pub type _YR_CONFIG_NAME = ::std::os::raw::c_uint;
pub use self::_YR_CONFIG_NAME as YR_CONFIG_NAME;
extern "C" {
    pub fn yr_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_set_configuration(
        arg1: YR_CONFIG_NAME,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_configuration(
        arg1: YR_CONFIG_NAME,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type YR_SCANNER = YR_SCAN_CONTEXT;
extern "C" {
    pub fn yr_scanner_create(
        rules: *mut YR_RULES,
        scanner: *mut *mut YR_SCANNER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_destroy(scanner: *mut YR_SCANNER);
}
extern "C" {
    pub fn yr_scanner_set_callback(
        scanner: *mut YR_SCANNER,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_scanner_set_timeout(scanner: *mut YR_SCANNER, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yr_scanner_set_flags(scanner: *mut YR_SCANNER, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yr_scanner_define_integer_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_define_boolean_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_define_float_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_define_string_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_mem_blocks(
        scanner: *mut YR_SCANNER,
        iterator: *mut YR_MEMORY_BLOCK_ITERATOR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_mem(
        scanner: *mut YR_SCANNER,
        buffer: *const u8,
        buffer_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_file(
        scanner: *mut YR_SCANNER,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_fd(
        scanner: *mut YR_SCANNER,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_proc(
        scanner: *mut YR_SCANNER,
        pid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_last_error_rule(scanner: *mut YR_SCANNER) -> *mut YR_RULE;
}
extern "C" {
    pub fn yr_scanner_last_error_string(scanner: *mut YR_SCANNER) -> *mut YR_STRING;
}
extern "C" {
    pub fn yr_scanner_get_profiling_info(scanner: *mut YR_SCANNER) -> *mut YR_RULE_PROFILING_INFO;
}
extern "C" {
    pub fn yr_scanner_reset_profiling_info(scanner: *mut YR_SCANNER);
}
extern "C" {
    pub fn yr_scanner_print_profiling_info(scanner: *mut YR_SCANNER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem_blocks(
        rules: *mut YR_RULES,
        iterator: *mut YR_MEMORY_BLOCK_ITERATOR,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem(
        rules: *mut YR_RULES,
        buffer: *const u8,
        buffer_size: size_t,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_file(
        rules: *mut YR_RULES,
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_fd(
        rules: *mut YR_RULES,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_proc(
        rules: *mut YR_RULES,
        pid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_save(
        rules: *mut YR_RULES,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_save_stream(
        rules: *mut YR_RULES,
        stream: *mut YR_STREAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_load(
        filename: *const ::std::os::raw::c_char,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_load_stream(
        stream: *mut YR_STREAM,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_destroy(rules: *mut YR_RULES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_integer_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_boolean_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_float_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_string_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_get_stats(
        rules: *mut YR_RULES,
        stats: *mut YR_RULES_STATS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rule_disable(rule: *mut YR_RULE);
}
extern "C" {
    pub fn yr_rule_enable(rule: *mut YR_RULE);
}
extern "C" {
    pub fn yr_rules_from_arena(
        arena: *mut YR_ARENA,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
